1. Устанавливаем пакет freeipmi

sudo apt install freeipmi

2. Создаем скрипт

nano ipmi.sh и вбиваем то ,что ниже, затем сохраняем

#!/bin/bash
#--------------------------------------------------------------------
ipmi_exporter_verison="1.8.0"
#---------------------установка----------------------------------------------


cd /tmp
wget https://github.com/prometheus-community/ipmi_exporter/releases/download/v$ipmi_exporter_verison/ipmi_exporter-$ipmi_exporter_verison.linux-amd64.tar.gz
tar xvfz ipmi_exporter-$ipmi_exporter_verison.linux-amd64.tar.gz
cd ipmi_exporter-$ipmi_exporter_verison.linux-amd64
mkdir /etc/ipmi_exporter
mv * /etc/ipmi_exporter/
rm -rf /tmp/ipmi_exporter*

3. Делаем файл исполняемым 

    chmod +x ipmi.sh


4. Запускаем его

    ./ipmi.sh

5. Cоздаем конфиг. файл для нашего ipmi сборщика , вот пример 

nano /etc/ipmi_exporter/ipmi_remote.yml

# Configuration file for ipmi_exporter

# This is an example config for scraping remote hosts via IPMI.
# Information required to access remote IPMI interfaces can be supplied in the
# 'modules' section. A scrape can request the usage of a given config by
# setting the `module` URL parameter.

modules:
        default:
                # These settings are used if no module is specified, the
                # specified module doesn't exist, or of course if
                # module=default is specified.
                user: "ADMIN"
                pass: "admin"
                # The below settings correspond to driver-type, privilege-level, and
                # session-timeout respectively, see `man 5 freeipmi.conf` (and e.g.
                # `man 8 ipmi-sensors` for a list of driver types).
                driver: "LAN_2_0"
                privilege: "administrator"
                # The session timeout is in milliseconds. Note that a scrape can take up
                # to (session-timeout * #-of-collectors) milliseconds, so set the scrape
                # timeout in Prometheus accordingly.
                # Must be larger than the retransmission timeout, which defaults to 1000.
                timeout: 10000
                # Available collectors are bmc, ipmi, chassis, dcmi, sel, and sm-lan-mode
                # If _not_ specified, bmc, ipmi, chassis, and dcmi are used
                collectors:
#                - fru
#                - sensor
#               - fwum
                - bmc
                - ipmi
                - chassis
                # Got any sensors you don't care about? Add them here.
                exclude_sensor_ids:
                - 2
                - 29
                - 32
                - 50
                - 52
                - 55
        dcmi:
                # Use these settings when scraped with module=dcmi.
                user: "admin_user"
                pass: "another_pw"
                privilege: "admin"
                driver: "LAN_2_0"
                collectors:
                - dcmi
        thatspecialhost:
                # Use these settings when scraped with module=thatspecialhost.
                user: "some_user"
                pass: "secret_pw"
                privilege: "admin"
                driver: "LAN"
                collectors:
                - ipmi
                - sel
                # Need any special workaround flags set? Add them here.
                # Workaround flags might be needed to address issues with specific vendor implementations
                # e.g. https://www.gnu.org/software/freeipmi/freeipmi-faq.html#Why-is-the-output-from-FreeIPMI-different-than-another-software_003f
                # For a full list of flags, refer to:
                # https://www.gnu.org/software/freeipmi/manpages/man8/ipmi-sensors.8.html#lbAL
                workaround_flags:
                - discretereading
                # If you require additional command line arguments (e.g. --bridge-sensors for ipmimonitoring),
                # you can specify them per collector - BE CAREFUL, you can easily break the exporter with this!
                custom_args:
                        ipmi:
                        - "--bridge-sensors"
        advanced:
                # Use these settings when scraped with module=advanced.
                user: "some_user"
                pass: "secret_pw"
                privilege: "admin"
                driver: "LAN"
                collectors:
                - ipmi
                - sel
                # USING ANY OF THE BELOW VOIDS YOUR WARRANTY! YOU MAY GET BITTEN BY SHARKS!
                # You can override the command to be executed for a collector. Paired with
                # custom_args, this can be used to e.g. execute the IPMI tools with sudo:

6. Создаем процесс, который будет запускать наш ipmi экспортер, с заданными настройками, которые включает сам исполняемый файл, его конфигурационный файл, и место хранения БД. После добавления -сохраняемся.

nano /etc/systemd/system/ipmi_exporter.service

[Unit]
Description=IPMI Exporter
Wants=network-online.target
After=network-online.target
[Service]
ExecStart=/etc/ipmi_exporter/ipmi_exporter --config.file=/etc/ipmi_exporter/ipmi_remote.yml
Restart=always
[Install]
WantedBy=multi-user.target

7. Запускаем ipmi экспортер как службу, добавляем его в автозапуск и проверяем его работоспособность .


systemctl daemon-reload
systemctl start ipmi_exporter.service
systemctl enable ipmi_exporter.service
systemctl status ipmi_exporter.service
